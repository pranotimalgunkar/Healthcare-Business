SELECT * FROM patients -- 974
SELECT * FROM encounters -- 27891
SELECT * FROM organizations --1
SELECT * FROM payers --10
SELECT * FROM procedures --47701

SELECT * FROM patients
SELECT GENDER,COUNT(*) AS COUNT_G FROM patients
GROUP BY GENDER
/*GENDER	COUNT_G
F	480
M	494
*/

--GENDER VISE COUNT OF ENCOUNTER
SELECT P.GENDER, COUNT(E.ID) FROM patients P
JOIN encounters E
ON P.ID = E.PATIENT
GROUP BY P.GENDER
/*GENDER	(No column name)
F	14924
M	12967
*/


SELECT DISTINCT PATIENT FROM procedures  ----793

SELECT DISTINCT PATIENT FROM encounters --974


---HOW MANY PATIENT ARE DIED DURING ENCOUNTER --154
SELECT * FROM patients
SELECT CONCAT(PREFIX,' ',P.FIRST,' ',P.LAST) AS NAME,P.BIRTHDATE,P.DEATHDATE AS NAME FROM patients P 
WHERE DEATHDATE IN (SELECT STOP FROM encounters ) AND DEATHDATE IS NOT NULL


--TOTAL HOW MANY PATEINT ARE DIED----154 
SELECT * FROM patients
WHERE DEATHDATE IS NOT NULL

SELECT DISTINCT YEAR(START) FROM encounters -- 2011 TO 2022
ORDER BY YEAR(START) 

SELECT MIN(DISTINCT DATEDIFF(YEAR,P.BIRTHDATE,E.START)) AS MIN_AGE,
MAX(DISTINCT DATEDIFF(YEAR,P.BIRTHDATE,E.START)) AS MAX_AGE FROM patients P
JOIN encounters E 
ON  P.Id=E.PATIENT
/*MIN_AGE	MAX_AGE
20	99*/

--1) Evaluating Financial Risk by Encounter Outcome
--Objective:Determine which ReasonCodes lead to the highest financial risk based on the
--total uncovered cost (difference between total claim cost and payer coverage). 
--Analyze this by combining patient demographics and encounter outcomes.
WITH PATIENT_DEMOGHAPHICS AS(
    SELECT
        P.ID,CONCAT(P.PREFIX,' ',P.FIRST,' ',P.LAST) AS NAME, P.GENDER, P.BIRTHDATE,P.DEATHDATE,
        DATEDIFF(YEAR,P.BIRTHDATE,E.START) AS AGE,P.MARITAL, P.RACE,P.ETHNICITY,P.CITY, P.STATE,P.COUNTY
    FROM patients P 
    JOIN encounters E ON P.Id = E.PATIENT
),

ENCOUNTER_OUTCOMES AS(
    SELECT E.PATIENT,E.CODE, E.DESCRIPTION,E.REASONCODE,E.REASONDESCRIPTION,
    SUM(E.TOTAL_CLAIM_COST - E.PAYER_COVERAGE) AS TOTAL_UNCOVERED_COST
    FROM encounters E
    WHERE E.TOTAL_CLAIM_COST > 0
    GROUP BY E.PATIENT, E.CODE, E.DESCRIPTION, E.REASONCODE, E.REASONDESCRIPTION
)

SELECT 
    PD.NAME,PD.GENDER,PD.BIRTHDATE,PD.DEATHDATE,PD.AGE,PD.MARITAL,PD.RACE,PD.ETHNICITY,PD.CITY,PD.STATE, PD.COUNTY,
    EO.PATIENT,EO.CODE,EO.DESCRIPTION,EO.REASONCODE,EO.REASONDESCRIPTION,EO.TOTAL_UNCOVERED_COST
FROM PATIENT_DEMOGHAPHICS PD 
JOIN ENCOUNTER_OUTCOMES EO ON PD.Id=EO.PATIENT
GROUP BY 
    PD.NAME,PD.GENDER,PD.BIRTHDATE,PD.DEATHDATE,PD.AGE,PD.MARITAL, PD.RACE,PD.ETHNICITY,PD.CITY,PD.STATE,PD.COUNTY,
    EO.PATIENT,EO.CODE,EO.DESCRIPTION,EO.REASONCODE,EO.REASONDESCRIPTION,EO.TOTAL_UNCOVERED_COST
ORDER BY EO.TOTAL_UNCOVERED_COST DESC;


/* 2) Identifying Patients with Frequent High-Cost Encounters
Objective:
Identify patients who had more than 3 encounters in a year where each encounter had 
a total claim cost above a certain threshold (e.g., $10,000). The query should return the
patient details, number of encounters, and the total cost for those encounters*/


WITH PATIENT_DEMOGHAPHICS AS(
    SELECT
        P.ID,CONCAT(P.PREFIX,' ',P.FIRST,' ',P.LAST) AS NAME,P.GENDER,P.BIRTHDATE,P.DEATHDATE,
        DATEDIFF(YEAR,P.BIRTHDATE,E.START) AS AGE,P.MARITAL,P.RACE,P.ETHNICITY,P.CITY,P.STATE,P.COUNTY
    FROM patients P 
    JOIN encounters E ON P.Id = E.PATIENT
),
VALID_ENCOUNTES AS(
    SELECT 
        PATIENT,
        COUNT(*) AS ENCOUNTERCOUNT,
        SUM(TOTAL_CLAIM_COST) AS TOTAL_CLAIM_COST,
        YEAR(START) AS ENCOUNTER_YEAR
    FROM encounters 
    WHERE TOTAL_CLAIM_COST > 10000 
    GROUP BY PATIENT,YEAR(START)
)
SELECT 
    PD.NAME,PD.GENDER,PD.BIRTHDATE,PD.DEATHDATE,PD.MARITAL,PD.RACE,PD.ETHNICITY,PD.CITY,
    PD.STATE,PD.COUNTY,VE.ENCOUNTER_YEAR,VE.ENCOUNTERCOUNT,VE.TOTAL_CLAIM_COST
FROM PATIENT_DEMOGHAPHICS PD 
JOIN VALID_ENCOUNTES VE ON PD.Id=VE.PATIENT
GROUP BY PD.NAME,
    PD.GENDER,PD.BIRTHDATE,PD.DEATHDATE,PD.MARITAL,PD.RACE,PD.ETHNICITY,PD.CITY,PD.STATE,PD.COUNTY,
    VE.ENCOUNTER_YEAR,VE.ENCOUNTERCOUNT,VE.TOTAL_CLAIM_COST
HAVING VE.ENCOUNTERCOUNT > 3
ORDER BY VE.TOTAL_CLAIM_COST desc,VE.ENCOUNTER_YEAR;

        

/* 3) Identifying Risk Factors Based on Demographics and Encounter Reasons
Objective:
Analyze the top 3 most frequent diagnosis codes (ReasonCodes) and the associated patient demographic data to 
understand which groups are most affected by high-cost encounters
*/


WITH PATIENT_DEMOGRAPHIC AS (
    SELECT 
        P.GENDER,
        DATEDIFF(YEAR,P.BIRTHDATE,E.START) AS AGE,
          CASE 
            WHEN DATEDIFF(YEAR, P.BIRTHDATE, E.START) BETWEEN 0 AND 20 THEN '0-40'
            WHEN DATEDIFF(YEAR, P.BIRTHDATE, E.START) BETWEEN 41 AND 60 THEN '41-70'
            ELSE '71+'
        END AS AGE_GROUP,
        P.CITY,P.MARITAL,P.RACE,P.ETHNICITY,E.REASONCODE,E.REASONDESCRIPTION,E.TOTAL_CLAIM_COST 
    FROM patients P
    JOIN encounters E ON P.Id=E.PATIENT
    WHERE TOTAL_CLAIM_COST > 0
)
SELECT DISTINCT TOP 5
    REASONCODE,REASONDESCRIPTION,COUNT(*) AS ENCOUNTER_COUNT,
    AGE_GROUP,GENDER,CITY,MARITAL,RACE,ETHNICITY,
    SUM(TOTAL_CLAIM_COST) AS TOTAL_CLAIM_COST
FROM PATIENT_DEMOGRAPHIC
where REASONCODE is not null
GROUP BY REASONCODE,REASONDESCRIPTION,GENDER,AGE_GROUP,CITY,MARITAL,RACE,ETHNICITY
ORDER BY ENCOUNTER_COUNT DESC;


/* 4) Assessing Payer Contributions for Different Procedure Types
Objective:
Analyze payer contributions for the base cost of procedures and identify any gaps between 
total claim cost and payer coverage.
*/

SELECT 
    PAYER,
    CODE,
    DESCRIPTION,
    REASONCODE,
    REASONDESCRIPTION,
    COUNT(*) AS ENCOUNTERCOUNT,
    SUM(BASE_ENCOUNTER_COST) AS TOTAL_BASE_COST,
    SUM(TOTAL_CLAIM_COST-PAYER_COVERAGE) AS TOTAL_UNCOVERED_COST
FROM encounters
WHERE TOTAL_CLAIM_COST > 0 AND PAYER_COVERAGE > 0
GROUP BY 
    PAYER,
    CODE,
    DESCRIPTION,
    REASONCODE,
    REASONDESCRIPTION
ORDER BY TOTAL_UNCOVERED_COST DESC;


/* 5) Identifying Patients with Multiple Procedures Across Encounters
Objective:
Find patients who had multiple procedures across different encounters with the same ReasonCode. 
*/

WITH PATIENT_DEMO AS(
    SELECT 
        P.ID AS PATIENTID,
        CONCAT(P.PREFIX,' ',P.FIRST,' ',P.LAST) AS NAME 
        FROM patients P 
),
VALID_PROCEDURE AS(
    SELECT
        PR.PATIENT,PR.ENCOUNTER,PR.CODE,PR.DESCRIPTION,PR.REASONCODE,
        PR.REASONDESCRIPTION,COUNT(*) AS PROCEDURECOUNT
    FROM  procedures PR
    WHERE REASONCODE IS NOT NULL 
    GROUP BY 
        PR.PATIENT,PR.ENCOUNTER,PR.CODE,PR.DESCRIPTION,
        PR.REASONCODE,PR.REASONDESCRIPTION
),
VALID_ENCOUNTERS AS (
    SELECT
        E.ID AS ENCOUNTER,E.PATIENT
    FROM encounters E
    WHERE TOTAL_CLAIM_COST>0
)
SELECT 
    PD.PATIENTID,PD.NAME,VP.PROCEDURECOUNT,VP.CODE,VP.DESCRIPTION,VP.REASONCODE,
    VP.REASONDESCRIPTION,COUNT(VE.ENCOUNTER) AS ENCOUNTERCOUNT
FROM PATIENT_DEMO PD
JOIN VALID_PROCEDURE VP ON PD.PATIENTID=VP.PATIENT
JOIN VALID_ENCOUNTERS VE ON VP.PATIENT=VE.PATIENT
GROUP BY 
    PATIENTID,NAME,PROCEDURECOUNT,CODE,DESCRIPTION,
    REASONCODE,REASONDESCRIPTION
HAVING PROCEDURECOUNT > 1
ORDER BY ENCOUNTERCOUNT DESC;
       
       
/* 6) Analyzing Patient Encounter Duration for Different Classes
Objective:
Calculate the average encounter duration for each class (EncounterClass) per organization, 
identifying any encounters that exceed 24 hours.

*/




